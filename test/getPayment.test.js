'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const getPayment_1 = require('../src/getPayment');
const http_status_codes_1 = require('http-status-codes');
const crypto_1 = require('crypto');
jest.mock('../src/lib/payments', () => ({
  getPayment: jest.fn(),
}));
const { getPayment } = require('../src/lib/payments');
const createEvent = (id) => ({
  body: null,
  headers: {},
  multiValueHeaders: {},
  httpMethod: 'GET',
  isBase64Encoded: false,
  path: '/',
  pathParameters: id ? { id } : null,
  queryStringParameters: null,
  multiValueQueryStringParameters: null,
  stageVariables: null,
  resource: '/',
  requestContext: {},
});
describe('Get Payment Handler', () => {
  afterEach(() => jest.resetAllMocks());
  it('returns 400 for malformed UUID', async () => {
    const res = await (0, getPayment_1.handler)(createEvent('not-a-uuid'));
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.BAD_REQUEST);
  });
  it('returns 400 when ID is not provided', async () => {
    const res = await (0, getPayment_1.handler)(createEvent(undefined));
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.BAD_REQUEST);
  });
  it('returns 200 and payment when valid ID is provided', async () => {
    const id = (0, crypto_1.randomUUID)();
    getPayment.mockResolvedValueOnce({ id: 'abc', amount: 500, currency: 'USD' });
    const res = await (0, getPayment_1.handler)(createEvent(id));
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.OK);
    expect(JSON.parse(res.body)).toEqual({ id: 'abc', amount: 500, currency: 'USD' });
  });
  it('returns 404 when no matching payment is found', async () => {
    getPayment.mockResolvedValueOnce(null);
    const id = (0, crypto_1.randomUUID)();
    const res = await (0, getPayment_1.handler)(createEvent(id));
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.NOT_FOUND);
  });
  it('returns 500 on unexpected error', async () => {
    getPayment.mockRejectedValueOnce(new Error('Unexpected error'));
    const id = (0, crypto_1.randomUUID)();
    const res = await (0, getPayment_1.handler)(createEvent(id));
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.INTERNAL_SERVER_ERROR);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UGF5bWVudC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2V0UGF5bWVudC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0RBQTBEO0FBQzFELHlEQUFnRDtBQUVoRCxtQ0FBb0M7QUFFcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3RDLFVBQVUsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0NBQ3RCLENBQUMsQ0FBQyxDQUFDO0FBRUosTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBRXRELE1BQU0sV0FBVyxHQUFHLENBQUMsRUFBVyxFQUF3QixFQUFFLENBQUMsQ0FBQztJQUMxRCxJQUFJLEVBQUUsSUFBSTtJQUNWLE9BQU8sRUFBRSxFQUFFO0lBQ1gsaUJBQWlCLEVBQUUsRUFBRTtJQUNyQixVQUFVLEVBQUUsS0FBSztJQUNqQixlQUFlLEVBQUUsS0FBSztJQUN0QixJQUFJLEVBQUUsR0FBRztJQUNULGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUk7SUFDbEMscUJBQXFCLEVBQUUsSUFBSTtJQUMzQiwrQkFBK0IsRUFBRSxJQUFJO0lBQ3JDLGNBQWMsRUFBRSxJQUFJO0lBQ3BCLFFBQVEsRUFBRSxHQUFHO0lBQ2IsY0FBYyxFQUFFLEVBQVM7Q0FDMUIsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUNuQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFFdEMsRUFBRSxDQUFDLGdDQUFnQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzlDLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxvQkFBVSxFQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLCtCQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMscUNBQXFDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbkQsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLG9CQUFVLEVBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsK0JBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN2RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtREFBbUQsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNqRSxNQUFNLEVBQUUsR0FBRyxJQUFBLG1CQUFVLEdBQUUsQ0FBQztRQUN4QixVQUFVLENBQUMscUJBQXFCLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDOUUsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLG9CQUFVLEVBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsK0JBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDcEYsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDN0QsVUFBVSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxHQUFHLElBQUEsbUJBQVUsR0FBRSxDQUFDO1FBQ3hCLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxvQkFBVSxFQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLCtCQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsaUNBQWlDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDL0MsVUFBVSxDQUFDLHFCQUFxQixDQUFDLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztRQUNoRSxNQUFNLEVBQUUsR0FBRyxJQUFBLG1CQUFVLEdBQUUsQ0FBQztRQUN4QixNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUEsb0JBQVUsRUFBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQywrQkFBVyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDakUsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhhbmRsZXIgYXMgZ2V0SGFuZGxlciB9IGZyb20gJy4uL3NyYy9nZXRQYXltZW50JztcbmltcG9ydCB7IFN0YXR1c0NvZGVzIH0gZnJvbSAnaHR0cC1zdGF0dXMtY29kZXMnO1xuaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnQgfSBmcm9tICdhd3MtbGFtYmRhJztcbmltcG9ydCB7IHJhbmRvbVVVSUQgfSBmcm9tICdjcnlwdG8nO1xuXG5qZXN0Lm1vY2soJy4uL3NyYy9saWIvcGF5bWVudHMnLCAoKSA9PiAoe1xuICBnZXRQYXltZW50OiBqZXN0LmZuKCksXG59KSk7XG5cbmNvbnN0IHsgZ2V0UGF5bWVudCB9ID0gcmVxdWlyZSgnLi4vc3JjL2xpYi9wYXltZW50cycpO1xuXG5jb25zdCBjcmVhdGVFdmVudCA9IChpZD86IHN0cmluZyk6IEFQSUdhdGV3YXlQcm94eUV2ZW50ID0+ICh7XG4gIGJvZHk6IG51bGwsXG4gIGhlYWRlcnM6IHt9LFxuICBtdWx0aVZhbHVlSGVhZGVyczoge30sXG4gIGh0dHBNZXRob2Q6ICdHRVQnLFxuICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICBwYXRoOiAnLycsXG4gIHBhdGhQYXJhbWV0ZXJzOiBpZCA/IHsgaWQgfSA6IG51bGwsXG4gIHF1ZXJ5U3RyaW5nUGFyYW1ldGVyczogbnVsbCxcbiAgbXVsdGlWYWx1ZVF1ZXJ5U3RyaW5nUGFyYW1ldGVyczogbnVsbCxcbiAgc3RhZ2VWYXJpYWJsZXM6IG51bGwsXG4gIHJlc291cmNlOiAnLycsXG4gIHJlcXVlc3RDb250ZXh0OiB7fSBhcyBhbnksXG59KTtcblxuZGVzY3JpYmUoJ0dldCBQYXltZW50IEhhbmRsZXInLCAoKSA9PiB7XG4gIGFmdGVyRWFjaCgoKSA9PiBqZXN0LnJlc2V0QWxsTW9ja3MoKSk7XG5cbiAgaXQoJ3JldHVybnMgNDAwIGZvciBtYWxmb3JtZWQgVVVJRCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRIYW5kbGVyKGNyZWF0ZUV2ZW50KCdub3QtYS11dWlkJykpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzQ29kZSkudG9CZShTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVCk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIDQwMCB3aGVuIElEIGlzIG5vdCBwcm92aWRlZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRIYW5kbGVyKGNyZWF0ZUV2ZW50KHVuZGVmaW5lZCkpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzQ29kZSkudG9CZShTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVCk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIDIwMCBhbmQgcGF5bWVudCB3aGVuIHZhbGlkIElEIGlzIHByb3ZpZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGlkID0gcmFuZG9tVVVJRCgpO1xuICAgIGdldFBheW1lbnQubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHsgaWQ6ICdhYmMnLCBhbW91bnQ6IDUwMCwgY3VycmVuY3k6ICdVU0QnIH0pO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGdldEhhbmRsZXIoY3JlYXRlRXZlbnQoaWQpKTtcbiAgICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoU3RhdHVzQ29kZXMuT0spO1xuICAgIGV4cGVjdChKU09OLnBhcnNlKHJlcy5ib2R5KSkudG9FcXVhbCh7IGlkOiAnYWJjJywgYW1vdW50OiA1MDAsIGN1cnJlbmN5OiAnVVNEJyB9KTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgNDA0IHdoZW4gbm8gbWF0Y2hpbmcgcGF5bWVudCBpcyBmb3VuZCcsIGFzeW5jICgpID0+IHtcbiAgICBnZXRQYXltZW50Lm1vY2tSZXNvbHZlZFZhbHVlT25jZShudWxsKTtcbiAgICBjb25zdCBpZCA9IHJhbmRvbVVVSUQoKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRIYW5kbGVyKGNyZWF0ZUV2ZW50KGlkKSk7XG4gICAgZXhwZWN0KHJlcy5zdGF0dXNDb2RlKS50b0JlKFN0YXR1c0NvZGVzLk5PVF9GT1VORCk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIDUwMCBvbiB1bmV4cGVjdGVkIGVycm9yJywgYXN5bmMgKCkgPT4ge1xuICAgIGdldFBheW1lbnQubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignVW5leHBlY3RlZCBlcnJvcicpKTtcbiAgICBjb25zdCBpZCA9IHJhbmRvbVVVSUQoKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBnZXRIYW5kbGVyKGNyZWF0ZUV2ZW50KGlkKSk7XG4gICAgZXhwZWN0KHJlcy5zdGF0dXNDb2RlKS50b0JlKFN0YXR1c0NvZGVzLklOVEVSTkFMX1NFUlZFUl9FUlJPUik7XG4gIH0pO1xufSk7Il19
