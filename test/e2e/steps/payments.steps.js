'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const cucumber_1 = require('@cucumber/cucumber');
const axios_1 = require('axios');
const assert = require('assert');
(0, cucumber_1.setDefaultTimeout)(20 * 1000);
let baseUrl;
let lastResponse;
let createdId;
(0, cucumber_1.Given)('the API is running at {string}', (url) => {
  baseUrl = url;
});
(0, cucumber_1.When)(
  'I create a payment with amount {int} and currency {string}',
  async (amount, currency) => {
    lastResponse = await axios_1.default.post(`${baseUrl}/payments`, { amount, currency });
    createdId = lastResponse.data.result;
  }
);
(0, cucumber_1.Then)('the response status should be {int}', (status) => {
  assert.strictEqual(lastResponse.status, status);
});
(0, cucumber_1.Then)('the JSON response should contain a field {string}', (field) => {
  assert.ok(field in lastResponse.data);
});
(0, cucumber_1.When)('I retrieve the payment by ID', async () => {
  lastResponse = await axios_1.default.get(`${baseUrl}/payments/${createdId}`);
});
(0, cucumber_1.Then)(
  'the JSON response should contain {string}, {string}, and {string}',
  (f1, f2, f3) => {
    const data = lastResponse.data;
    [f1, f2, f3].forEach((f) => assert.ok(f in data));
  }
);
(0, cucumber_1.When)('I list payments filtered by currency {string}', async (currency) => {
  lastResponse = await axios_1.default.get(`${baseUrl}/payments`, { params: { currency } });
});
(0, cucumber_1.Then)('the JSON response should include my payment in the data array', () => {
  const arr = lastResponse.data.data;
  assert.ok(arr.some((p) => p.id === createdId));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudHMuc3RlcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwYXltZW50cy5zdGVwcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlEQUEwRTtBQUMxRSxpQ0FBNkM7QUFDN0MsaUNBQWlDO0FBRWpDLElBQUEsNEJBQWlCLEVBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBRTdCLElBQUksT0FBZSxDQUFDO0FBQ3BCLElBQUksWUFBMkIsQ0FBQztBQUNoQyxJQUFJLFNBQWlCLENBQUM7QUFFdEIsSUFBQSxnQkFBSyxFQUFDLGdDQUFnQyxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUU7SUFDdEQsT0FBTyxHQUFHLEdBQUcsQ0FBQztBQUNoQixDQUFDLENBQUMsQ0FBQztBQUVILElBQUEsZUFBSSxFQUFDLDREQUE0RCxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUU7SUFDNUYsWUFBWSxHQUFHLE1BQU0sZUFBSyxDQUFDLElBQUksQ0FBQyxHQUFHLE9BQU8sV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDN0UsU0FBUyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBQSxlQUFJLEVBQUMscUNBQXFDLEVBQUUsQ0FBQyxNQUFjLEVBQUUsRUFBRTtJQUM3RCxNQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDbEQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFBLGVBQUksRUFBQyxtREFBbUQsRUFBRSxDQUFDLEtBQWEsRUFBRSxFQUFFO0lBQzFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxDQUFDLENBQUMsQ0FBQztBQUVILElBQUEsZUFBSSxFQUFDLDhCQUE4QixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQzlDLFlBQVksR0FBRyxNQUFNLGVBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLGFBQWEsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUNyRSxDQUFDLENBQUMsQ0FBQztBQUVILElBQUEsZUFBSSxFQUFDLG1FQUFtRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtJQUN2RixNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDO0lBQy9CLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ2xELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBQSxlQUFJLEVBQUMsK0NBQStDLEVBQUUsS0FBSyxFQUFFLFFBQWdCLEVBQUUsRUFBRTtJQUMvRSxZQUFZLEdBQUcsTUFBTSxlQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbEYsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFBLGVBQUksRUFBQywrREFBK0QsRUFBRSxHQUFHLEVBQUU7SUFDekUsTUFBTSxHQUFHLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDdEQsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHaXZlbiwgV2hlbiwgVGhlbiwgc2V0RGVmYXVsdFRpbWVvdXQgfSBmcm9tICdAY3VjdW1iZXIvY3VjdW1iZXInO1xuaW1wb3J0IGF4aW9zLCB7IEF4aW9zUmVzcG9uc2UgfSBmcm9tICdheGlvcyc7XG5pbXBvcnQgKiBhcyBhc3NlcnQgZnJvbSAnYXNzZXJ0Jztcblxuc2V0RGVmYXVsdFRpbWVvdXQoMjAgKiAxMDAwKTtcblxubGV0IGJhc2VVcmw6IHN0cmluZztcbmxldCBsYXN0UmVzcG9uc2U6IEF4aW9zUmVzcG9uc2U7XG5sZXQgY3JlYXRlZElkOiBzdHJpbmc7XG5cbkdpdmVuKCd0aGUgQVBJIGlzIHJ1bm5pbmcgYXQge3N0cmluZ30nLCAodXJsOiBzdHJpbmcpID0+IHtcbiAgYmFzZVVybCA9IHVybDtcbn0pO1xuXG5XaGVuKCdJIGNyZWF0ZSBhIHBheW1lbnQgd2l0aCBhbW91bnQge2ludH0gYW5kIGN1cnJlbmN5IHtzdHJpbmd9JywgYXN5bmMgKGFtb3VudCwgY3VycmVuY3kpID0+IHtcbiAgbGFzdFJlc3BvbnNlID0gYXdhaXQgYXhpb3MucG9zdChgJHtiYXNlVXJsfS9wYXltZW50c2AsIHsgYW1vdW50LCBjdXJyZW5jeSB9KTtcbiAgY3JlYXRlZElkID0gbGFzdFJlc3BvbnNlLmRhdGEucmVzdWx0O1xufSk7XG5cblRoZW4oJ3RoZSByZXNwb25zZSBzdGF0dXMgc2hvdWxkIGJlIHtpbnR9JywgKHN0YXR1czogbnVtYmVyKSA9PiB7XG4gIGFzc2VydC5zdHJpY3RFcXVhbChsYXN0UmVzcG9uc2Uuc3RhdHVzLCBzdGF0dXMpO1xufSk7XG5cblRoZW4oJ3RoZSBKU09OIHJlc3BvbnNlIHNob3VsZCBjb250YWluIGEgZmllbGQge3N0cmluZ30nLCAoZmllbGQ6IHN0cmluZykgPT4ge1xuICBhc3NlcnQub2soZmllbGQgaW4gbGFzdFJlc3BvbnNlLmRhdGEpO1xufSk7XG5cbldoZW4oJ0kgcmV0cmlldmUgdGhlIHBheW1lbnQgYnkgSUQnLCBhc3luYyAoKSA9PiB7XG4gIGxhc3RSZXNwb25zZSA9IGF3YWl0IGF4aW9zLmdldChgJHtiYXNlVXJsfS9wYXltZW50cy8ke2NyZWF0ZWRJZH1gKTtcbn0pO1xuXG5UaGVuKCd0aGUgSlNPTiByZXNwb25zZSBzaG91bGQgY29udGFpbiB7c3RyaW5nfSwge3N0cmluZ30sIGFuZCB7c3RyaW5nfScsIChmMSwgZjIsIGYzKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSBsYXN0UmVzcG9uc2UuZGF0YTtcbiAgW2YxLCBmMiwgZjNdLmZvckVhY2goZiA9PiBhc3NlcnQub2soZiBpbiBkYXRhKSk7XG59KTtcblxuV2hlbignSSBsaXN0IHBheW1lbnRzIGZpbHRlcmVkIGJ5IGN1cnJlbmN5IHtzdHJpbmd9JywgYXN5bmMgKGN1cnJlbmN5OiBzdHJpbmcpID0+IHtcbiAgbGFzdFJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KGAke2Jhc2VVcmx9L3BheW1lbnRzYCwgeyBwYXJhbXM6IHsgY3VycmVuY3kgfSB9KTtcbn0pO1xuXG5UaGVuKCd0aGUgSlNPTiByZXNwb25zZSBzaG91bGQgaW5jbHVkZSBteSBwYXltZW50IGluIHRoZSBkYXRhIGFycmF5JywgKCkgPT4ge1xuICBjb25zdCBhcnIgPSBsYXN0UmVzcG9uc2UuZGF0YS5kYXRhO1xuICBhc3NlcnQub2soYXJyLnNvbWUoKHA6IGFueSkgPT4gcC5pZCA9PT0gY3JlYXRlZElkKSk7XG59KTtcbiJdfQ==
