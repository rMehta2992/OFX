"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const getPaymentSchema_1 = require("../../src/schemas/getPaymentSchema");
describe('GetPaymentSchema', () => {
    it('accepts a valid pathParameters object', () => {
        const input = { pathParameters: { id: '550e8400-e29b-41d4-a716-446655440000' } };
        const { error, value } = getPaymentSchema_1.GetPaymentSchema.validate(input, { abortEarly: false });
        expect(error).toBeUndefined();
        expect(value).toEqual(input);
    });
    it('rejects missing pathParameters', () => {
        const { error } = getPaymentSchema_1.GetPaymentSchema.validate({}, { abortEarly: false });
        expect(error).toBeDefined();
        const messages = error.details.map(d => d.message);
        expect(messages).toEqual(expect.arrayContaining([
            '"pathParameters" is required'
        ]));
    });
    it('rejects invalid UUID', () => {
        var _a;
        const input = { pathParameters: { id: 'not-a-uuid' } };
        const { error } = getPaymentSchema_1.GetPaymentSchema.validate(input, { abortEarly: false });
        expect(error).toBeDefined();
        const msg = (_a = error.details.find(d => d.path.join('.') === 'pathParameters.id')) === null || _a === void 0 ? void 0 : _a.message;
        expect(msg).toMatch(/must be a valid UUID/);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0UGF5bWVudFNjaGVtYS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2V0UGF5bWVudFNjaGVtYS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EseUVBQXNFO0FBRXRFLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFDaEMsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtRQUMvQyxNQUFNLEtBQUssR0FBRyxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsRUFBRSxzQ0FBc0MsRUFBRSxFQUFFLENBQUM7UUFDakYsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxtQ0FBZ0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDakYsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZ0NBQWdDLEVBQUUsR0FBRyxFQUFFO1FBQ3hDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxtQ0FBZ0IsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDdkUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzVCLE1BQU0sUUFBUSxHQUFHLEtBQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BELE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQ3RCLE1BQU0sQ0FBQyxlQUFlLENBQUM7WUFDckIsOEJBQThCO1NBQy9CLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFOztRQUM5QixNQUFNLEtBQUssR0FBRyxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDO1FBQ3ZELE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxtQ0FBZ0IsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDMUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzVCLE1BQU0sR0FBRyxHQUFHLE1BQUEsS0FBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxtQkFBbUIsQ0FBQywwQ0FBRSxPQUFPLENBQUM7UUFDeEYsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBKb2kgZnJvbSAnam9pJztcbmltcG9ydCB7IEdldFBheW1lbnRTY2hlbWEgfSBmcm9tICcuLi8uLi9zcmMvc2NoZW1hcy9nZXRQYXltZW50U2NoZW1hJztcblxuZGVzY3JpYmUoJ0dldFBheW1lbnRTY2hlbWEnLCAoKSA9PiB7XG4gIGl0KCdhY2NlcHRzIGEgdmFsaWQgcGF0aFBhcmFtZXRlcnMgb2JqZWN0JywgKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0geyBwYXRoUGFyYW1ldGVyczogeyBpZDogJzU1MGU4NDAwLWUyOWItNDFkNC1hNzE2LTQ0NjY1NTQ0MDAwMCcgfSB9O1xuICAgIGNvbnN0IHsgZXJyb3IsIHZhbHVlIH0gPSBHZXRQYXltZW50U2NoZW1hLnZhbGlkYXRlKGlucHV0LCB7IGFib3J0RWFybHk6IGZhbHNlIH0pO1xuICAgIGV4cGVjdChlcnJvcikudG9CZVVuZGVmaW5lZCgpO1xuICAgIGV4cGVjdCh2YWx1ZSkudG9FcXVhbChpbnB1dCk7XG4gIH0pO1xuXG4gIGl0KCdyZWplY3RzIG1pc3NpbmcgcGF0aFBhcmFtZXRlcnMnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBlcnJvciB9ID0gR2V0UGF5bWVudFNjaGVtYS52YWxpZGF0ZSh7fSwgeyBhYm9ydEVhcmx5OiBmYWxzZSB9KTtcbiAgICBleHBlY3QoZXJyb3IpLnRvQmVEZWZpbmVkKCk7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBlcnJvciEuZGV0YWlscy5tYXAoZCA9PiBkLm1lc3NhZ2UpO1xuICAgIGV4cGVjdChtZXNzYWdlcykudG9FcXVhbChcbiAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAnXCJwYXRoUGFyYW1ldGVyc1wiIGlzIHJlcXVpcmVkJ1xuICAgICAgXSlcbiAgICApO1xuICB9KTtcblxuICBpdCgncmVqZWN0cyBpbnZhbGlkIFVVSUQnLCAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSB7IHBhdGhQYXJhbWV0ZXJzOiB7IGlkOiAnbm90LWEtdXVpZCcgfSB9O1xuICAgIGNvbnN0IHsgZXJyb3IgfSA9IEdldFBheW1lbnRTY2hlbWEudmFsaWRhdGUoaW5wdXQsIHsgYWJvcnRFYXJseTogZmFsc2UgfSk7XG4gICAgZXhwZWN0KGVycm9yKS50b0JlRGVmaW5lZCgpO1xuICAgIGNvbnN0IG1zZyA9IGVycm9yIS5kZXRhaWxzLmZpbmQoZCA9PiBkLnBhdGguam9pbignLicpID09PSAncGF0aFBhcmFtZXRlcnMuaWQnKT8ubWVzc2FnZTtcbiAgICBleHBlY3QobXNnKS50b01hdGNoKC9tdXN0IGJlIGEgdmFsaWQgVVVJRC8pO1xuICB9KTtcbn0pOyJdfQ==