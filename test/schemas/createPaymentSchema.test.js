"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const createPaymentSchema_1 = require("../../src/schemas/createPaymentSchema");
describe('PaymentSchema', () => {
    it('accepts valid payload', () => {
        const payload = { amount: 123.45, currency: 'USD', description: 'Test' };
        const { error, value } = createPaymentSchema_1.PaymentSchema.validate(payload, { abortEarly: false });
        expect(error).toBeUndefined();
        expect(value).toEqual(payload);
    });
    it('rejects negative amount and bad currency', () => {
        const payload = { amount: -1, currency: 'us', description: '' };
        const { error } = createPaymentSchema_1.PaymentSchema.validate(payload, { abortEarly: false });
        expect(error).toBeDefined();
        const messages = error.details.map(d => d.message);
        expect(messages).toEqual(expect.arrayContaining([
            '"amount" must be greater than or equal to 0',
            '"currency" length must be 3 characters long',
            '"description" is not allowed to be empty'
        ]));
    });
    it('rejects missing required fields', () => {
        const payload = {};
        const { error } = createPaymentSchema_1.PaymentSchema.validate(payload, { abortEarly: false });
        expect(error).toBeDefined();
        const paths = error.details.map(d => d.path.join('.'));
        expect(paths).toEqual(expect.arrayContaining(['amount', 'currency']));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlUGF5bWVudFNjaGVtYS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlUGF5bWVudFNjaGVtYS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsK0VBQXNFO0FBRXRFLFFBQVEsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO0lBQzdCLEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7UUFDL0IsTUFBTSxPQUFPLEdBQUcsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxDQUFDO1FBQ3pFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsbUNBQWEsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDaEYsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1FBQ2xELE1BQU0sT0FBTyxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ2hFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxtQ0FBYSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN6RSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUIsTUFBTSxRQUFRLEdBQUcsS0FBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FDdEIsTUFBTSxDQUFDLGVBQWUsQ0FBQztZQUNyQiw2Q0FBNkM7WUFDN0MsNkNBQTZDO1lBQzdDLDBDQUEwQztTQUMzQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGlDQUFpQyxFQUFFLEdBQUcsRUFBRTtRQUN6QyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDbkIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLG1DQUFhLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QixNQUFNLEtBQUssR0FBRyxLQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgSm9pIGZyb20gJ2pvaSc7XG5pbXBvcnQgeyBQYXltZW50U2NoZW1hIH0gZnJvbSAnLi4vLi4vc3JjL3NjaGVtYXMvY3JlYXRlUGF5bWVudFNjaGVtYSc7XG5cbmRlc2NyaWJlKCdQYXltZW50U2NoZW1hJywgKCkgPT4ge1xuICBpdCgnYWNjZXB0cyB2YWxpZCBwYXlsb2FkJywgKCkgPT4ge1xuICAgIGNvbnN0IHBheWxvYWQgPSB7IGFtb3VudDogMTIzLjQ1LCBjdXJyZW5jeTogJ1VTRCcsIGRlc2NyaXB0aW9uOiAnVGVzdCcgfTtcbiAgICBjb25zdCB7IGVycm9yLCB2YWx1ZSB9ID0gUGF5bWVudFNjaGVtYS52YWxpZGF0ZShwYXlsb2FkLCB7IGFib3J0RWFybHk6IGZhbHNlIH0pO1xuICAgIGV4cGVjdChlcnJvcikudG9CZVVuZGVmaW5lZCgpO1xuICAgIGV4cGVjdCh2YWx1ZSkudG9FcXVhbChwYXlsb2FkKTtcbiAgfSk7XG5cbiAgaXQoJ3JlamVjdHMgbmVnYXRpdmUgYW1vdW50IGFuZCBiYWQgY3VycmVuY3knLCAoKSA9PiB7XG4gICAgY29uc3QgcGF5bG9hZCA9IHsgYW1vdW50OiAtMSwgY3VycmVuY3k6ICd1cycsIGRlc2NyaXB0aW9uOiAnJyB9O1xuICAgIGNvbnN0IHsgZXJyb3IgfSA9IFBheW1lbnRTY2hlbWEudmFsaWRhdGUocGF5bG9hZCwgeyBhYm9ydEVhcmx5OiBmYWxzZSB9KTtcbiAgICBleHBlY3QoZXJyb3IpLnRvQmVEZWZpbmVkKCk7XG4gICAgY29uc3QgbWVzc2FnZXMgPSBlcnJvciEuZGV0YWlscy5tYXAoZCA9PiBkLm1lc3NhZ2UpO1xuICAgIGV4cGVjdChtZXNzYWdlcykudG9FcXVhbChcbiAgICAgIGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoW1xuICAgICAgICAnXCJhbW91bnRcIiBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAwJyxcbiAgICAgICAgJ1wiY3VycmVuY3lcIiBsZW5ndGggbXVzdCBiZSAzIGNoYXJhY3RlcnMgbG9uZycsXG4gICAgICAgICdcImRlc2NyaXB0aW9uXCIgaXMgbm90IGFsbG93ZWQgdG8gYmUgZW1wdHknXG4gICAgICBdKVxuICAgICk7XG4gIH0pO1xuXG4gIGl0KCdyZWplY3RzIG1pc3NpbmcgcmVxdWlyZWQgZmllbGRzJywgKCkgPT4ge1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBQYXltZW50U2NoZW1hLnZhbGlkYXRlKHBheWxvYWQsIHsgYWJvcnRFYXJseTogZmFsc2UgfSk7XG4gICAgZXhwZWN0KGVycm9yKS50b0JlRGVmaW5lZCgpO1xuICAgIGNvbnN0IHBhdGhzID0gZXJyb3IhLmRldGFpbHMubWFwKGQgPT4gZC5wYXRoLmpvaW4oJy4nKSk7XG4gICAgZXhwZWN0KHBhdGhzKS50b0VxdWFsKGV4cGVjdC5hcnJheUNvbnRhaW5pbmcoWydhbW91bnQnLCAnY3VycmVuY3knXSkpO1xuICB9KTtcbn0pO1xuIl19