'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const createPayment_1 = require('../src/createPayment');
const http_status_codes_1 = require('http-status-codes');
const payments = require('../src/lib/payments');
const crypto_1 = require('crypto');
describe('Create Payment Handler', () => {
  afterEach(() => jest.resetAllMocks());
  // Valid creation scenario
  it('returns 201 and generated ID on success', async () => {
    const fakeId = (0, crypto_1.randomUUID)();
    jest.spyOn(payments, 'createPayment').mockResolvedValueOnce();
    jest.spyOn(require('crypto'), 'randomUUID').mockReturnValueOnce(fakeId);
    const event = { body: JSON.stringify({ amount: 500, currency: 'USD' }) };
    const res = await (0, createPayment_1.handler)(event);
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.CREATED);
    expect(JSON.parse(res.body)).toEqual({ result: fakeId });
  });
  // Joi validation tests
  it('returns 400 for invalid amount', async () => {
    const event = { body: JSON.stringify({ amount: -10, currency: 'USD' }) };
    const res = await (0, createPayment_1.handler)(event);
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.BAD_REQUEST);
  });
  it('returns 400 for invalid currency', async () => {
    const event = { body: JSON.stringify({ amount: 100, currency: 'usd1' }) };
    const res = await (0, createPayment_1.handler)(event);
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.BAD_REQUEST);
  });
  it('returns 400 for missing amount', async () => {
    const event = { body: JSON.stringify({ currency: 'USD' }) };
    const res = await (0, createPayment_1.handler)(event);
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.BAD_REQUEST);
  });
  it('returns 400 for missing currency', async () => {
    const event = { body: JSON.stringify({ amount: 100 }) };
    const res = await (0, createPayment_1.handler)(event);
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.BAD_REQUEST);
  });
  it('returns 400 for completely empty payload', async () => {
    const event = { body: JSON.stringify({}) };
    const res = await (0, createPayment_1.handler)(event);
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.BAD_REQUEST);
  });
  // Simulate internal error
  it('returns 500 on internal error', async () => {
    jest.spyOn(payments, 'createPayment').mockRejectedValueOnce(new Error('internal error'));
    jest
      .spyOn(require('crypto'), 'randomUUID')
      .mockReturnValueOnce('33333333-3333-4333-8333-333333333333');
    const event = { body: JSON.stringify({ amount: 50, currency: 'AUD' }) };
    const res = await (0, createPayment_1.handler)(event);
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.INTERNAL_SERVER_ERROR);
  });
  it('returns 400 for amount 0 (not positive)', async () => {
    const event = { body: JSON.stringify({ amount: 0, currency: 'USD' }) };
    const res = await (0, createPayment_1.handler)(event);
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.BAD_REQUEST);
  });
  it('returns 400 for amount as a string', async () => {
    const event = { body: JSON.stringify({ amount: '100', currency: 'USD' }) };
    const res = await (0, createPayment_1.handler)(event);
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.BAD_REQUEST);
  });
  it('returns 400 for lowercase currency code', async () => {
    const event = { body: JSON.stringify({ amount: 100, currency: 'usd' }) };
    const res = await (0, createPayment_1.handler)(event);
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.BAD_REQUEST);
  });
  it('returns 400 for empty currency string', async () => {
    const event = { body: JSON.stringify({ amount: 100, currency: '' }) };
    const res = await (0, createPayment_1.handler)(event);
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.BAD_REQUEST);
  });
  it('returns 400 for unknown fields in payload if not allowed', async () => {
    const event = { body: JSON.stringify({ amount: 100, currency: 'USD', note: 'test' }) };
    const res = await (0, createPayment_1.handler)(event);
    expect(res.statusCode).toBe(http_status_codes_1.StatusCodes.BAD_REQUEST);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlUGF5bWVudC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlUGF5bWVudC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0RBQWdFO0FBQ2hFLHlEQUFnRDtBQUVoRCxnREFBZ0Q7QUFDaEQsbUNBQW9DO0FBRXBDLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7SUFDdEMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBRXRDLDBCQUEwQjtJQUMxQixFQUFFLENBQUMseUNBQXlDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDdkQsTUFBTSxNQUFNLEdBQUcsSUFBQSxtQkFBVSxHQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUM5RCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RSxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBMEIsQ0FBQztRQUNqRyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUEsdUJBQWEsRUFBQyxLQUFLLENBQUMsQ0FBQztRQUV2QyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQywrQkFBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO1FBQUEsQ0FB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QUFXLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkQsQ0FBQyxDQUFDLENBQUM7QUFFTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhhbmRsZXIgYXMgY3JlYXRlSGFuZGxlciB9IGZyb20gJy4uL3NyYy9jcmVhdGVQYXltZW50JztcbmltcG9ydCB7IFN0YXR1c0NvZGVzIH0gZnJvbSAnaHR0cC1zdGF0dXMtY29kZXMnO1xuaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnQgfSBmcm9tICdhd3MtbGFtYmRhJztcbmltcG9ydCAqIGFzIHBheW1lbnRzIGZyb20gJy4uL3NyYy9saWIvcGF5bWVudHMnO1xuaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gJ2NyeXB0byc7XG5cbmRlc2NyaWJlKCdDcmVhdGUgUGF5bWVudCBIYW5kbGVyJywgKCkgPT4ge1xuICBhZnRlckVhY2goKCkgPT4gamVzdC5yZXNldEFsbE1vY2tzKCkpO1xuXG4gIC8vIFZhbGlkIGNyZWF0aW9uIHNjZW5hcmlvXG4gIGl0KCdyZXR1cm5zIDIwMSBhbmQgZ2VuZXJhdGVkIElEIG9uIHN1Y2Nlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZmFrZUlkID0gcmFuZG9tVVVJRCgpO1xuICAgIGplc3Quc3B5T24ocGF5bWVudHMsICdjcmVhdGVQYXltZW50JykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKCk7XG4gICAgamVzdC5zcHlPbihyZXF1aXJlKCdjcnlwdG8nKSwgJ3JhbmRvbVVVSUQnKS5tb2NrUmV0dXJuVmFsdWVPbmNlKGZha2VJZCk7XG5cbiAgICBjb25zdCBldmVudCA9IHsgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBhbW91bnQ6IDUwMCwgY3VycmVuY3k6ICdVU0QnIH0pIH0gYXMgQVBJR2F0ZXdheVByb3h5RXZlbnQ7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgY3JlYXRlSGFuZGxlcihldmVudCk7XG5cbiAgICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoU3RhdHVzQ29kZXMuQ1JFQVRFRCk7XG4gICAgZXhwZWN0KEpTT04ucGFyc2UocmVzLmJvZHkpKS50b0VxdWFsKHsgcmVzdWx0OiBmYWtlSWQgfSk7O1xuICB9KTtcblxuICAvLyBKb2kgdmFsaWRhdGlvbiB0ZXN0c1xuICBpdCgncmV0dXJucyA0MDAgZm9yIGludmFsaWQgYW1vdW50JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50ID0geyBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGFtb3VudDogLTEwLCBjdXJyZW5jeTogJ1VTRCcgfSkgfSBhcyBBUElHYXRld2F5UHJveHlFdmVudDtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjcmVhdGVIYW5kbGVyKGV2ZW50KTtcbiAgICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoU3RhdHVzQ29kZXMuQkFEX1JFUVVFU1QpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyA0MDAgZm9yIGludmFsaWQgY3VycmVuY3knLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZXZlbnQgPSB7IGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgYW1vdW50OiAxMDAsIGN1cnJlbmN5OiAndXNkMScgfSkgfSBhcyBBUElHYXRld2F5UHJveHlFdmVudDtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjcmVhdGVIYW5kbGVyKGV2ZW50KTtcbiAgICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoU3RhdHVzQ29kZXMuQkFEX1JFUVVFU1QpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyA0MDAgZm9yIG1pc3NpbmcgYW1vdW50JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50ID0geyBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGN1cnJlbmN5OiAnVVNEJyB9KSB9IGFzIEFQSUdhdGV3YXlQcm94eUV2ZW50O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNyZWF0ZUhhbmRsZXIoZXZlbnQpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzQ29kZSkudG9CZShTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVCk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIDQwMCBmb3IgbWlzc2luZyBjdXJyZW5jeScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBldmVudCA9IHsgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBhbW91bnQ6IDEwMCB9KSB9IGFzIEFQSUdhdGV3YXlQcm94eUV2ZW50O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNyZWF0ZUhhbmRsZXIoZXZlbnQpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzQ29kZSkudG9CZShTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVCk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIDQwMCBmb3IgY29tcGxldGVseSBlbXB0eSBwYXlsb2FkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50ID0geyBib2R5OiBKU09OLnN0cmluZ2lmeSh7fSkgfSBhcyBBUElHYXRld2F5UHJveHlFdmVudDtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjcmVhdGVIYW5kbGVyKGV2ZW50KTtcbiAgICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoU3RhdHVzQ29kZXMuQkFEX1JFUVVFU1QpO1xuICB9KTtcbiAgLy8gU2ltdWxhdGUgaW50ZXJuYWwgZXJyb3JcbiAgaXQoJ3JldHVybnMgNTAwIG9uIGludGVybmFsIGVycm9yJywgYXN5bmMgKCkgPT4ge1xuICAgIGplc3Quc3B5T24ocGF5bWVudHMsICdjcmVhdGVQYXltZW50JykubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignaW50ZXJuYWwgZXJyb3InKSk7XG4gICAgamVzdC5zcHlPbihyZXF1aXJlKCdjcnlwdG8nKSwgJ3JhbmRvbVVVSUQnKS5tb2NrUmV0dXJuVmFsdWVPbmNlKCczMzMzMzMzMy0zMzMzLTQzMzMtODMzMy0zMzMzMzMzMzMzMzMnKTtcblxuICAgIGNvbnN0IGV2ZW50ID0geyBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGFtb3VudDogNTAsIGN1cnJlbmN5OiAnQVVEJyB9KSB9IGFzIEFQSUdhdGV3YXlQcm94eUV2ZW50O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNyZWF0ZUhhbmRsZXIoZXZlbnQpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzQ29kZSkudG9CZShTdGF0dXNDb2Rlcy5JTlRFUk5BTF9TRVJWRVJfRVJST1IpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyA0MDAgZm9yIGFtb3VudCAwIChub3QgcG9zaXRpdmUpJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50ID0geyBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGFtb3VudDogMCwgY3VycmVuY3k6ICdVU0QnIH0pIH0gYXMgQVBJR2F0ZXdheVByb3h5RXZlbnQ7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgY3JlYXRlSGFuZGxlcihldmVudCk7XG4gICAgZXhwZWN0KHJlcy5zdGF0dXNDb2RlKS50b0JlKFN0YXR1c0NvZGVzLkJBRF9SRVFVRVNUKTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgNDAwIGZvciBhbW91bnQgYXMgYSBzdHJpbmcnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZXZlbnQgPSB7IGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgYW1vdW50OiBcIjEwMFwiLCBjdXJyZW5jeTogJ1VTRCcgfSkgfSBhcyBBUElHYXRld2F5UHJveHlFdmVudDtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjcmVhdGVIYW5kbGVyKGV2ZW50KTtcbiAgICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoU3RhdHVzQ29kZXMuQkFEX1JFUVVFU1QpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyA0MDAgZm9yIGxvd2VyY2FzZSBjdXJyZW5jeSBjb2RlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50ID0geyBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGFtb3VudDogMTAwLCBjdXJyZW5jeTogJ3VzZCcgfSkgfSBhcyBBUElHYXRld2F5UHJveHlFdmVudDtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjcmVhdGVIYW5kbGVyKGV2ZW50KTtcbiAgICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoU3RhdHVzQ29kZXMuQkFEX1JFUVVFU1QpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyA0MDAgZm9yIGVtcHR5IGN1cnJlbmN5IHN0cmluZycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBldmVudCA9IHsgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBhbW91bnQ6IDEwMCwgY3VycmVuY3k6ICcnIH0pIH0gYXMgQVBJR2F0ZXdheVByb3h5RXZlbnQ7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgY3JlYXRlSGFuZGxlcihldmVudCk7XG4gICAgZXhwZWN0KHJlcy5zdGF0dXNDb2RlKS50b0JlKFN0YXR1c0NvZGVzLkJBRF9SRVFVRVNUKTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgNDAwIGZvciB1bmtub3duIGZpZWxkcyBpbiBwYXlsb2FkIGlmIG5vdCBhbGxvd2VkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50ID0geyBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGFtb3VudDogMTAwLCBjdXJyZW5jeTogJ1VTRCcsIG5vdGU6ICd0ZXN0JyB9KSB9IGFzIEFQSUdhdGV3YXlQcm94eUV2ZW50O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNyZWF0ZUhhbmRsZXIoZXZlbnQpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzQ29kZSkudG9CZShTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVCk7XG4gIH0pO1xuXG59KTsiXX0=
