"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const payments = require("../src/lib/payments");
const createPayment_1 = require("../src/createPayment");
const crypto_1 = require("crypto");
describe('createPayment handler', () => {
    afterEach(() => jest.resetAllMocks());
    it('returns 201 and generated ID on success', async () => {
        const fakeId = '11111111-1111-4111-8111-111111111111';
        jest.spyOn(payments, 'createPayment').mockResolvedValueOnce();
        jest.spyOn(require('crypto'), 'randomUUID').mockReturnValueOnce(fakeId);
        const event = { body: JSON.stringify({ amount: 500, currency: 'USD' }) };
        const res = await (0, createPayment_1.handler)(event);
        expect(payments.createPayment).toHaveBeenCalledWith({ id: fakeId, amount: 500, currency: 'USD' });
        expect(res.statusCode).toBe(201);
        expect(JSON.parse(res.body)).toEqual({ result: fakeId });
    });
    it('ignores client-supplied id in payload', async () => {
        const fakeId = '22222222-2222-4222-8222-222222222222';
        jest.spyOn(payments, 'createPayment').mockResolvedValueOnce();
        jest.spyOn(require('crypto'), 'randomUUID').mockReturnValueOnce(fakeId);
        const event = { body: JSON.stringify({ id: 'foo', amount: 100, currency: 'EUR' }) };
        const res = await (0, createPayment_1.handler)(event);
        expect(payments.createPayment).toHaveBeenCalledWith({ id: fakeId, amount: 100, currency: 'EUR' });
        expect(res.statusCode).toBe(201);
        expect(JSON.parse(res.body)).toEqual({ result: fakeId });
    });
    it('returns 422 on invalid payload', async () => {
        const event = { body: JSON.stringify({ amount: -5, currency: 'EURO' }) };
        const res = await (0, createPayment_1.handler)(event);
        expect(res.statusCode).toBe(422);
        const body = JSON.parse(res.body);
        console.log(body);
        expect(Array.isArray(body.errors)).toBe(true);
        expect(body.errors[0]).toHaveProperty('message');
    });
    it('returns 500 on unexpected errors', async () => {
        jest.spyOn(payments, 'createPayment').mockRejectedValueOnce(new Error('db error'));
        const fakeId = (0, crypto_1.randomUUID)();
        jest.spyOn(require('crypto'), 'randomUUID').mockReturnValueOnce(fakeId);
        const event = { body: JSON.stringify({ amount: 10, currency: 'AUD' }) };
        const res = await (0, createPayment_1.handler)(event);
        expect(res.statusCode).toBe(500);
        expect(JSON.parse(res.body)).toEqual({ error: 'Internal server error' });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlUGF5bWVudC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlUGF5bWVudC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsZ0RBQWdEO0FBQ2hELHdEQUErQztBQUMvQyxtQ0FBb0M7QUFHcEMsUUFBUSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtJQUNyQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFFdEMsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3ZELE1BQU0sTUFBTSxHQUFHLHNDQUFzQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDOUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFeEUsTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQXFDLENBQUM7UUFDNUcsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLHVCQUFPLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFFakMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNsRyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx1Q0FBdUMsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNyRCxNQUFNLE1BQU0sR0FBRyxzQ0FBc0MsQ0FBQztRQUN0RCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQUMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzlELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXhFLE1BQU0sS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQXFDLENBQUM7UUFDdkgsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLHVCQUFPLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFFakMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNsRyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMzRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM5QyxNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFxQyxDQUFDO1FBQzVHLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSx1QkFBTyxFQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEIsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ25ELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2hELElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLGVBQWUsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDbkYsTUFBTSxNQUFNLEdBQUcsSUFBQSxtQkFBVSxHQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFeEUsTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQXFDLENBQUM7UUFDM0csTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLHVCQUFPLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLENBQUMsQ0FBQztJQUMzRSxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF5bWVudHMgZnJvbSAnLi4vc3JjL2xpYi9wYXltZW50cyc7XG5pbXBvcnQgeyBoYW5kbGVyIH0gZnJvbSAnLi4vc3JjL2NyZWF0ZVBheW1lbnQnO1xuaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuXG5kZXNjcmliZSgnY3JlYXRlUGF5bWVudCBoYW5kbGVyJywgKCkgPT4ge1xuICBhZnRlckVhY2goKCkgPT4gamVzdC5yZXNldEFsbE1vY2tzKCkpO1xuXG4gIGl0KCdyZXR1cm5zIDIwMSBhbmQgZ2VuZXJhdGVkIElEIG9uIHN1Y2Nlc3MnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZmFrZUlkID0gJzExMTExMTExLTExMTEtNDExMS04MTExLTExMTExMTExMTExMSc7XG4gICAgamVzdC5zcHlPbihwYXltZW50cywgJ2NyZWF0ZVBheW1lbnQnKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoKTtcbiAgICBqZXN0LnNweU9uKHJlcXVpcmUoJ2NyeXB0bycpLCAncmFuZG9tVVVJRCcpLm1vY2tSZXR1cm5WYWx1ZU9uY2UoZmFrZUlkKTtcblxuICAgIGNvbnN0IGV2ZW50ID0geyBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGFtb3VudDogNTAwLCBjdXJyZW5jeTogJ1VTRCcgfSkgfSBhcyB1bmtub3duIGFzIEFQSUdhdGV3YXlQcm94eUV2ZW50O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGhhbmRsZXIoZXZlbnQpO1xuXG4gICAgZXhwZWN0KHBheW1lbnRzLmNyZWF0ZVBheW1lbnQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgaWQ6IGZha2VJZCwgYW1vdW50OiA1MDAsIGN1cnJlbmN5OiAnVVNEJyB9KTtcbiAgICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoMjAxKTtcbiAgICBleHBlY3QoSlNPTi5wYXJzZShyZXMuYm9keSkpLnRvRXF1YWwoeyByZXN1bHQ6IGZha2VJZCB9KTtcbiAgfSk7XG5cbiAgaXQoJ2lnbm9yZXMgY2xpZW50LXN1cHBsaWVkIGlkIGluIHBheWxvYWQnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgZmFrZUlkID0gJzIyMjIyMjIyLTIyMjItNDIyMi04MjIyLTIyMjIyMjIyMjIyMic7XG4gICAgamVzdC5zcHlPbihwYXltZW50cywgJ2NyZWF0ZVBheW1lbnQnKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UoKTtcbiAgICBqZXN0LnNweU9uKHJlcXVpcmUoJ2NyeXB0bycpLCAncmFuZG9tVVVJRCcpLm1vY2tSZXR1cm5WYWx1ZU9uY2UoZmFrZUlkKTtcblxuICAgIGNvbnN0IGV2ZW50ID0geyBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGlkOiAnZm9vJywgYW1vdW50OiAxMDAsIGN1cnJlbmN5OiAnRVVSJyB9KSB9IGFzIHVua25vd24gYXMgQVBJR2F0ZXdheVByb3h5RXZlbnQ7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgaGFuZGxlcihldmVudCk7XG5cbiAgICBleHBlY3QocGF5bWVudHMuY3JlYXRlUGF5bWVudCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoeyBpZDogZmFrZUlkLCBhbW91bnQ6IDEwMCwgY3VycmVuY3k6ICdFVVInIH0pO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzQ29kZSkudG9CZSgyMDEpO1xuICAgIGV4cGVjdChKU09OLnBhcnNlKHJlcy5ib2R5KSkudG9FcXVhbCh7IHJlc3VsdDogZmFrZUlkIH0pO1xuICB9KTtcblxuICBpdCgncmV0dXJucyA0MjIgb24gaW52YWxpZCBwYXlsb2FkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGV2ZW50ID0geyBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGFtb3VudDogLTUsIGN1cnJlbmN5OiAnRVVSTycgfSkgfSBhcyB1bmtub3duIGFzIEFQSUdhdGV3YXlQcm94eUV2ZW50O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGhhbmRsZXIoZXZlbnQpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzQ29kZSkudG9CZSg0MjIpO1xuICAgIGNvbnN0IGJvZHkgPSBKU09OLnBhcnNlKHJlcy5ib2R5KTtcbiAgICBjb25zb2xlLmxvZyhib2R5KTtcbiAgICBleHBlY3QoQXJyYXkuaXNBcnJheShib2R5LmVycm9ycykpLnRvQmUodHJ1ZSk7XG4gICAgZXhwZWN0KGJvZHkuZXJyb3JzWzBdKS50b0hhdmVQcm9wZXJ0eSgnbWVzc2FnZScpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyA1MDAgb24gdW5leHBlY3RlZCBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgamVzdC5zcHlPbihwYXltZW50cywgJ2NyZWF0ZVBheW1lbnQnKS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCdkYiBlcnJvcicpKTtcbiAgICBjb25zdCBmYWtlSWQgPSByYW5kb21VVUlEKCk7XG4gICAgamVzdC5zcHlPbihyZXF1aXJlKCdjcnlwdG8nKSwgJ3JhbmRvbVVVSUQnKS5tb2NrUmV0dXJuVmFsdWVPbmNlKGZha2VJZCk7XG5cbiAgICBjb25zdCBldmVudCA9IHsgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBhbW91bnQ6IDEwLCBjdXJyZW5jeTogJ0FVRCcgfSkgfSBhcyB1bmtub3duIGFzIEFQSUdhdGV3YXlQcm94eUV2ZW50O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGhhbmRsZXIoZXZlbnQpO1xuICAgIGV4cGVjdChyZXMuc3RhdHVzQ29kZSkudG9CZSg1MDApO1xuICAgIGV4cGVjdChKU09OLnBhcnNlKHJlcy5ib2R5KSkudG9FcXVhbCh7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9KTtcbiAgfSk7XG59KTsiXX0=