"use strict";
// test/listPayments.test.ts
Object.defineProperty(exports, "__esModule", { value: true });
const payments = require("../src/lib/payments");
const listPayments_1 = require("../src/listPayments");
describe('listPayments handler', () => {
    afterEach(() => {
        jest.resetAllMocks();
    });
    it('returns 200 and all payments when no currency filter provided', async () => {
        const mockData = [
            { id: '1', amount: 100, currency: 'USD' },
            { id: '2', amount: 200, currency: 'EUR' }
        ];
        jest.spyOn(payments, 'listPayments').mockResolvedValueOnce(mockData);
        const event = {};
        const result = await (0, listPayments_1.handler)(event);
        expect(payments.listPayments).toHaveBeenCalledWith(undefined);
        expect(result.statusCode).toBe(200);
        expect(JSON.parse(result.body)).toEqual({ data: mockData });
    });
    it('returns 200 and filtered payments when currency filter provided', async () => {
        const mockData = [{ id: '1', amount: 100, currency: 'USD' }];
        jest.spyOn(payments, 'listPayments').mockResolvedValueOnce(mockData);
        const event = { queryStringParameters: { currency: 'USD' } };
        const result = await (0, listPayments_1.handler)(event);
        expect(payments.listPayments).toHaveBeenCalledWith('USD');
        expect(result.statusCode).toBe(200);
        expect(JSON.parse(result.body)).toEqual({ data: mockData });
    });
    it('returns 400 when invalid currency filter provided', async () => {
        // 1️⃣ Spy on listPayments so we can assert it never runs
        const spy = jest.spyOn(payments, 'listPayments');
        const event = { queryStringParameters: { currency: 'US' } };
        const result = await (0, listPayments_1.handler)(event);
        const body = JSON.parse(result.body);
        expect(result.statusCode).toBe(400);
        expect(body).toHaveProperty('errors');
        expect(Array.isArray(body.errors)).toBe(true);
        expect(body.errors[0]).toHaveProperty('message');
        // 2️⃣ Ensure our service layer was never called on bad input
        expect(spy).not.toHaveBeenCalled();
    });
    it('returns 500 on unexpected exceptions', async () => {
        jest.spyOn(payments, 'listPayments').mockRejectedValueOnce(new Error('boom'));
        const event = {};
        const result = await (0, listPayments_1.handler)(event);
        expect(result.statusCode).toBe(500);
        expect(JSON.parse(result.body)).toEqual({ error: 'Internal server error' });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdFBheW1lbnRzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsaXN0UGF5bWVudHMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNEJBQTRCOztBQUU1QixnREFBZ0Q7QUFDaEQsc0RBQThDO0FBRzlDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFDcEMsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQywrREFBK0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM3RSxNQUFNLFFBQVEsR0FBRztZQUNmLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7WUFDekMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRTtTQUMxQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFckUsTUFBTSxLQUFLLEdBQUcsRUFBcUMsQ0FBQztRQUNwRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsc0JBQU8sRUFBQyxLQUFLLENBQUMsQ0FBQztRQUVwQyxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlELE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lB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b250ZW50IjpbIi8vIHRlc3QvbGlzdFBheW1lbnRzLnRlc3QudHNcblxuaW1wb3J0ICogYXMgcGF5bWVudHMgZnJvbSAnLi4vc3JjL2xpYi9wYXltZW50cyc7XG5pbXBvcnQgeyBoYW5kbGVyIH0gZnJvbSAnLi4vc3JjL2xpc3RQYXltZW50cyc7XG5pbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuXG5kZXNjcmliZSgnbGlzdFBheW1lbnRzIGhhbmRsZXInLCAoKSA9PiB7XG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5yZXNldEFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIDIwMCBhbmQgYWxsIHBheW1lbnRzIHdoZW4gbm8gY3VycmVuY3kgZmlsdGVyIHByb3ZpZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tEYXRhID0gW1xuICAgICAgeyBpZDogJzEnLCBhbW91bnQ6IDEwMCwgY3VycmVuY3k6ICdVU0QnIH0sXG4gICAgICB7IGlkOiAnMicsIGFtb3VudDogMjAwLCBjdXJyZW5jeTogJ0VVUicgfVxuICAgIF07XG4gICAgamVzdC5zcHlPbihwYXltZW50cywgJ2xpc3RQYXltZW50cycpLm1vY2tSZXNvbHZlZFZhbHVlT25jZShtb2NrRGF0YSk7XG5cbiAgICBjb25zdCBldmVudCA9IHt9IGFzIHVua25vd24gYXMgQVBJR2F0ZXdheVByb3h5RXZlbnQ7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaGFuZGxlcihldmVudCk7XG5cbiAgICBleHBlY3QocGF5bWVudHMubGlzdFBheW1lbnRzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh1bmRlZmluZWQpO1xuICAgIGV4cGVjdChyZXN1bHQuc3RhdHVzQ29kZSkudG9CZSgyMDApO1xuICAgIGV4cGVjdChKU09OLnBhcnNlKHJlc3VsdC5ib2R5KSkudG9FcXVhbCh7IGRhdGE6IG1vY2tEYXRhIH0pO1xuICB9KTtcblxuICBpdCgncmV0dXJucyAyMDAgYW5kIGZpbHRlcmVkIHBheW1lbnRzIHdoZW4gY3VycmVuY3kgZmlsdGVyIHByb3ZpZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tEYXRhID0gWyB7IGlkOiAnMScsIGFtb3VudDogMTAwLCBjdXJyZW5jeTogJ1VTRCcgfSBdO1xuICAgIGplc3Quc3B5T24ocGF5bWVudHMsICdsaXN0UGF5bWVudHMnKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobW9ja0RhdGEpO1xuXG4gICAgY29uc3QgZXZlbnQgPSB7IHF1ZXJ5U3RyaW5nUGFyYW1ldGVyczogeyBjdXJyZW5jeTogJ1VTRCcgfSB9IGFzIHVua25vd24gYXMgQVBJR2F0ZXdheVByb3h5RXZlbnQ7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaGFuZGxlcihldmVudCk7XG5cbiAgICBleHBlY3QocGF5bWVudHMubGlzdFBheW1lbnRzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnVVNEJyk7XG4gICAgZXhwZWN0KHJlc3VsdC5zdGF0dXNDb2RlKS50b0JlKDIwMCk7XG4gICAgZXhwZWN0KEpTT04ucGFyc2UocmVzdWx0LmJvZHkpKS50b0VxdWFsKHsgZGF0YTogbW9ja0RhdGEgfSk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIDQwMCB3aGVuIGludmFsaWQgY3VycmVuY3kgZmlsdGVyIHByb3ZpZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIDHvuI/ig6MgU3B5IG9uIGxpc3RQYXltZW50cyBzbyB3ZSBjYW4gYXNzZXJ0IGl0IG5ldmVyIHJ1bnNcbiAgICBjb25zdCBzcHkgPSBqZXN0LnNweU9uKHBheW1lbnRzLCAnbGlzdFBheW1lbnRzJyk7XG5cbiAgICBjb25zdCBldmVudCA9IHsgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzOiB7IGN1cnJlbmN5OiAnVVMnIH0gfSBhcyB1bmtub3duIGFzIEFQSUdhdGV3YXlQcm94eUV2ZW50O1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGhhbmRsZXIoZXZlbnQpO1xuXG4gICAgY29uc3QgYm9keSA9IEpTT04ucGFyc2UocmVzdWx0LmJvZHkpO1xuICAgIGV4cGVjdChyZXN1bHQuc3RhdHVzQ29kZSkudG9CZSg0MDApO1xuICAgIGV4cGVjdChib2R5KS50b0hhdmVQcm9wZXJ0eSgnZXJyb3JzJyk7XG4gICAgZXhwZWN0KEFycmF5LmlzQXJyYXkoYm9keS5lcnJvcnMpKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChib2R5LmVycm9yc1swXSkudG9IYXZlUHJvcGVydHkoJ21lc3NhZ2UnKTtcblxuICAgIC8vIDLvuI/ig6MgRW5zdXJlIG91ciBzZXJ2aWNlIGxheWVyIHdhcyBuZXZlciBjYWxsZWQgb24gYmFkIGlucHV0XG4gICAgZXhwZWN0KHNweSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgNTAwIG9uIHVuZXhwZWN0ZWQgZXhjZXB0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICBqZXN0LnNweU9uKHBheW1lbnRzLCAnbGlzdFBheW1lbnRzJykubW9ja1JlamVjdGVkVmFsdWVPbmNlKG5ldyBFcnJvcignYm9vbScpKTtcblxuICAgIGNvbnN0IGV2ZW50ID0ge30gYXMgdW5rbm93biBhcyBBUElHYXRld2F5UHJveHlFdmVudDtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBoYW5kbGVyKGV2ZW50KTtcblxuICAgIGV4cGVjdChyZXN1bHQuc3RhdHVzQ29kZSkudG9CZSg1MDApO1xuICAgIGV4cGVjdChKU09OLnBhcnNlKHJlc3VsdC5ib2R5KSkudG9FcXVhbCh7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9KTtcbiAgfSk7XG59KTtcbiJdfQ==