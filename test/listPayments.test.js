'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
const listPayments_1 = require('../src/listPayments');
const http_status_codes_1 = require('http-status-codes');
const payments = require('../src/lib/payments');
describe('List Payments Handler', () => {
  afterEach(() => jest.resetAllMocks());
  it('returns 200 with all payments when no filter is applied', async () => {
    const mockData = [
      { id: '1', amount: 100, currency: 'USD' },
      { id: '2', amount: 200, currency: 'EUR' },
    ];
    jest.spyOn(payments, 'listPayments').mockResolvedValueOnce(mockData);
    const event = {};
    const result = await (0, listPayments_1.handler)(event);
    expect(result.statusCode).toBe(http_status_codes_1.StatusCodes.OK);
    expect(JSON.parse(result.body)).toEqual({ data: mockData });
  });
  it('returns 200 with filtered results when valid currency is passed', async () => {
    const mockData = [{ id: '3', amount: 150, currency: 'USD' }];
    jest.spyOn(payments, 'listPayments').mockResolvedValueOnce(mockData);
    const event = {
      queryStringParameters: { currency: 'USD' },
    };
    const result = await (0, listPayments_1.handler)(event);
    expect(result.statusCode).toBe(http_status_codes_1.StatusCodes.OK);
    expect(JSON.parse(result.body)).toEqual({ data: mockData });
  });
  it('returns 400 for invalid currency code', async () => {
    const spy = jest.spyOn(payments, 'listPayments');
    const event = {
      queryStringParameters: { currency: 'US' },
    };
    const result = await (0, listPayments_1.handler)(event);
    expect(result.statusCode).toBe(http_status_codes_1.StatusCodes.BAD_REQUEST);
    const body = JSON.parse(result.body);
    expect(body).toHaveProperty('errors');
    expect(spy).not.toHaveBeenCalled();
  });
  it('returns 500 on internal error', async () => {
    jest.spyOn(payments, 'listPayments').mockRejectedValueOnce(new Error('Service failure'));
    const event = {};
    const result = await (0, listPayments_1.handler)(event);
    expect(result.statusCode).toBe(http_status_codes_1.StatusCodes.INTERNAL_SERVER_ERROR);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdFBheW1lbnRzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsaXN0UGF5bWVudHMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNEQUE2RDtBQUM3RCx5REFBZ0Q7QUFFaEQsZ0RBQWdEO0FBRWhELFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBRXRDLEVBQUUsQ0FBQyx5REFBeUQsRUFBRSxLQUFLLElBQUksRUFBRTtRQUN2RSxNQUFNLFFBQVEsR0FBRztZQUNmLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7WUFDekMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRTtTQUMxQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFckUsTUFBTSxLQUFLLEdBQUcsRUFBcUMsQ0FBQztRQUNwRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsc0JBQVcsRUFBQyxLQUFLLENBQUMsQ0FBQztRQUV4QyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQywrQkFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQzlELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGlFQUFpRSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQy9FLE1BQU0sUUFBUSxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFckUsTUFBTSxLQUFLLEdBQUc7WUFDWixxQkFBcUIsRUFBRSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUU7U0FDUixDQUFDO1FBRXJDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxzQkFBVyxFQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXhDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLCtCQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDOUQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsdUNBQXVDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDckQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFFakQsTUFBTSxLQUFLLEdBQUc7WUFDWixxQkFBcUIsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUU7U0FDUCxDQUFDO1FBRXJDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxzQkFBVyxFQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLCtCQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFeEQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDckMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsK0JBQStCLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUMscUJBQXFCLENBQUMsSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBRXpGLE1BQU0sS0FBSyxHQUFHLEVBQXFDLENBQUM7UUFDcEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLHNCQUFXLEVBQUMsS0FBSyxDQUFDLENBQUM7UUFFeEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsK0JBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQ3BFLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBoYW5kbGVyIGFzIGxpc3RIYW5kbGVyIH0gZnJvbSAnLi4vc3JjL2xpc3RQYXltZW50cyc7XG5pbXBvcnQgeyBTdGF0dXNDb2RlcyB9IGZyb20gJ2h0dHAtc3RhdHVzLWNvZGVzJztcbmltcG9ydCB7IEFQSUdhdGV3YXlQcm94eUV2ZW50IH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQgKiBhcyBwYXltZW50cyBmcm9tICcuLi9zcmMvbGliL3BheW1lbnRzJztcblxuZGVzY3JpYmUoJ0xpc3QgUGF5bWVudHMgSGFuZGxlcicsICgpID0+IHtcbiAgYWZ0ZXJFYWNoKCgpID0+IGplc3QucmVzZXRBbGxNb2NrcygpKTtcblxuICBpdCgncmV0dXJucyAyMDAgd2l0aCBhbGwgcGF5bWVudHMgd2hlbiBubyBmaWx0ZXIgaXMgYXBwbGllZCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrRGF0YSA9IFtcbiAgICAgIHsgaWQ6ICcxJywgYW1vdW50OiAxMDAsIGN1cnJlbmN5OiAnVVNEJyB9LFxuICAgICAgeyBpZDogJzInLCBhbW91bnQ6IDIwMCwgY3VycmVuY3k6ICdFVVInIH0sXG4gICAgXTtcbiAgICBqZXN0LnNweU9uKHBheW1lbnRzLCAnbGlzdFBheW1lbnRzJykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tEYXRhKTtcblxuICAgIGNvbnN0IGV2ZW50ID0ge30gYXMgdW5rbm93biBhcyBBUElHYXRld2F5UHJveHlFdmVudDtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBsaXN0SGFuZGxlcihldmVudCk7XG5cbiAgICBleHBlY3QocmVzdWx0LnN0YXR1c0NvZGUpLnRvQmUoU3RhdHVzQ29kZXMuT0spO1xuICAgIGV4cGVjdChKU09OLnBhcnNlKHJlc3VsdC5ib2R5KSkudG9FcXVhbCh7IGRhdGE6IG1vY2tEYXRhIH0pO1xuICB9KTtcblxuICBpdCgncmV0dXJucyAyMDAgd2l0aCBmaWx0ZXJlZCByZXN1bHRzIHdoZW4gdmFsaWQgY3VycmVuY3kgaXMgcGFzc2VkJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tEYXRhID0gW3sgaWQ6ICczJywgYW1vdW50OiAxNTAsIGN1cnJlbmN5OiAnVVNEJyB9XTtcbiAgICBqZXN0LnNweU9uKHBheW1lbnRzLCAnbGlzdFBheW1lbnRzJykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG1vY2tEYXRhKTtcblxuICAgIGNvbnN0IGV2ZW50ID0ge1xuICAgICAgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzOiB7IGN1cnJlbmN5OiAnVVNEJyB9LFxuICAgIH0gYXMgdW5rbm93biBhcyBBUElHYXRld2F5UHJveHlFdmVudDtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGxpc3RIYW5kbGVyKGV2ZW50KTtcblxuICAgIGV4cGVjdChyZXN1bHQuc3RhdHVzQ29kZSkudG9CZShTdGF0dXNDb2Rlcy5PSyk7XG4gICAgZXhwZWN0KEpTT04ucGFyc2UocmVzdWx0LmJvZHkpKS50b0VxdWFsKHsgZGF0YTogbW9ja0RhdGEgfSk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIDQwMCBmb3IgaW52YWxpZCBjdXJyZW5jeSBjb2RlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNweSA9IGplc3Quc3B5T24ocGF5bWVudHMsICdsaXN0UGF5bWVudHMnKTtcblxuICAgIGNvbnN0IGV2ZW50ID0ge1xuICAgICAgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzOiB7IGN1cnJlbmN5OiAnVVMnIH0sXG4gICAgfSBhcyB1bmtub3duIGFzIEFQSUdhdGV3YXlQcm94eUV2ZW50O1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbGlzdEhhbmRsZXIoZXZlbnQpO1xuICAgIGV4cGVjdChyZXN1bHQuc3RhdHVzQ29kZSkudG9CZShTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVCk7XG5cbiAgICBjb25zdCBib2R5ID0gSlNPTi5wYXJzZShyZXN1bHQuYm9keSk7XG4gICAgZXhwZWN0KGJvZHkpLnRvSGF2ZVByb3BlcnR5KCdlcnJvcnMnKTtcbiAgICBleHBlY3Qoc3B5KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyA1MDAgb24gaW50ZXJuYWwgZXJyb3InLCBhc3luYyAoKSA9PiB7XG4gICAgamVzdC5zcHlPbihwYXltZW50cywgJ2xpc3RQYXltZW50cycpLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ1NlcnZpY2UgZmFpbHVyZScpKTtcblxuICAgIGNvbnN0IGV2ZW50ID0ge30gYXMgdW5rbm93biBhcyBBUElHYXRld2F5UHJveHlFdmVudDtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBsaXN0SGFuZGxlcihldmVudCk7XG5cbiAgICBleHBlY3QocmVzdWx0LnN0YXR1c0NvZGUpLnRvQmUoU3RhdHVzQ29kZXMuSU5URVJOQUxfU0VSVkVSX0VSUk9SKTtcbiAgfSk7XG59KTsiXX0=
