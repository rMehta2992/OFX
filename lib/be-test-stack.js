'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.BeTestStack = void 0;
const cdk = require('aws-cdk-lib');
const aws_apigateway_1 = require('aws-cdk-lib/aws-apigateway');
const aws_dynamodb_1 = require('aws-cdk-lib/aws-dynamodb');
const aws_lambda_1 = require('aws-cdk-lib/aws-lambda');
const aws_lambda_nodejs_1 = require('aws-cdk-lib/aws-lambda-nodejs');
class BeTestStack extends cdk.Stack {
  constructor(scope, id, props) {
    super(scope, id, props);
    this.createLambda = (name, path) => {
      return new aws_lambda_nodejs_1.NodejsFunction(this, name, {
        functionName: name,
        runtime: aws_lambda_1.Runtime.NODEJS_16_X,
        entry: path,
      });
    };
    // Dynamo DB table
    /* RM: updated name to payments so that the createPayment lambda can have put permissions for this table */
    const paymentsTable = new aws_dynamodb_1.Table(this, 'Payments', {
      tableName: 'Payments',
      partitionKey: { name: 'paymentId', type: aws_dynamodb_1.AttributeType.STRING },
    });
    // API
    const paymentsApi = new aws_apigateway_1.RestApi(this, 'ofxPaymentsChallenge', {
      defaultCorsPreflightOptions: {
        allowOrigins: aws_apigateway_1.Cors.ALL_ORIGINS,
        allowMethods: aws_apigateway_1.Cors.ALL_METHODS,
      },
    });
    // Two routes" /payments and /payments/id
    const paymentsResource = paymentsApi.root.addResource('payments');
    const specificPaymentResource = paymentsResource.addResource('{id}');
    // Functions
    const createPaymentFunction = this.createLambda('createPayment', 'src/createPayment.ts');
    paymentsTable.grantWriteData(createPaymentFunction);
    paymentsResource.addMethod(
      'POST',
      new aws_apigateway_1.LambdaIntegration(createPaymentFunction)
    );
    const getPaymentFunction = this.createLambda('getPayment', 'src/getPayment.ts');
    paymentsTable.grantReadData(getPaymentFunction);
    specificPaymentResource.addMethod(
      'GET',
      new aws_apigateway_1.LambdaIntegration(getPaymentFunction)
    );
    // Bound to GET /payments/{id}.
    const listPaymentsFunction = this.createLambda('listPayments', 'src/listPayments.ts');
    paymentsTable.grantReadData(listPaymentsFunction);
    paymentsResource.addMethod('GET', new aws_apigateway_1.LambdaIntegration(listPaymentsFunction));
  }
}
exports.BeTestStack = BeTestStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmUtdGVzdC1zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJlLXRlc3Qtc3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUNBQW1DO0FBQ25DLCtEQUE4RTtBQUM5RSwyREFBZ0U7QUFDaEUsdURBQWlEO0FBQ2pELHFFQUErRDtBQUcvRCxNQUFhLFdBQVksU0FBUSxHQUFHLENBQUMsS0FBSztJQUN0QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXNCO1FBQzVELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBb0M1QixpQkFBWSxHQUFHLENBQUMsSUFBWSxFQUFFLElBQVksRUFBRSxFQUFFO1lBQzFDLE9BQU8sSUFBSSxrQ0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUU7Z0JBQ2xDLFlBQVksRUFBRSxJQUFJO2dCQUNsQixPQUFPLEVBQUUsb0JBQU8sQ0FBQyxXQUFXO2dCQUM1QixLQUFLLEVBQUUsSUFBSTthQUNkLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQztRQXhDRSxtQkFBbUI7UUFDbkIsMkdBQTJHO1FBQzNHLE1BQU0sYUFBYSxHQUFHLElBQUksb0JBQUssQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQzlDLFNBQVMsRUFBRSxVQUFVO1lBQ3JCLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLDRCQUFhLENBQUMsTUFBTSxFQUFFO1NBQ2xFLENBQUMsQ0FBQztRQUVILE1BQU07UUFDTixNQUFNLFdBQVcsR0FBRyxJQUFJLHdCQUFPLENBQUMsSUFBSSxFQUFFLHNCQUFzQixFQUFFO1lBQzFELDJCQUEyQixFQUFFO2dCQUN6QixZQUFZLEVBQUUscUJBQUksQ0FBQyxXQUFXO2dCQUM5QixZQUFZLEVBQUUscUJBQUksQ0FBQyxXQUFXO2FBQ2pDO1NBQ0osQ0FBQyxDQUFDO1FBRUgsMENBQTBDO1FBQzFDLE1BQU0sZ0JBQWdCLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEUsTUFBTSx1QkFBdUIsR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFckUsWUFBWTtRQUNaLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztRQUN6RixhQUFhLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDcEQsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxJQUFJLGtDQUFpQixDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztRQUVqRixNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFDaEYsYUFBYSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2hELHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxrQ0FBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7UUFDcEYsK0JBQStCO1FBRS9CLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQUN0RixhQUFhLENBQUMsYUFBYSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDbEQsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxJQUFJLGtDQUFpQixDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQztJQUNuRixDQUFDO0NBU0o7QUE3Q0Qsa0NBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvcnMsIExhbWJkYUludGVncmF0aW9uLCBSZXN0QXBpIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWFwaWdhdGV3YXknO1xuaW1wb3J0IHsgQXR0cmlidXRlVHlwZSwgVGFibGUgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZHluYW1vZGInO1xuaW1wb3J0IHsgUnVudGltZSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgTm9kZWpzRnVuY3Rpb24gfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhLW5vZGVqcyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuZXhwb3J0IGNsYXNzIEJlVGVzdFN0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wcz86IGNkay5TdGFja1Byb3BzKSB7XG4gICAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgICAgIC8vIER5bmFtbyBEQiB0YWJsZSBcbiAgICAgICAgLyogUk06IHVwZGF0ZWQgbmFtZSB0byBwYXltZW50cyBzbyB0aGF0IHRoZSBjcmVhdGVQYXltZW50IGxhbWJkYSBjYW4gaGF2ZSBwdXQgcGVybWlzc2lvbnMgZm9yIHRoaXMgdGFibGUgKi8gXG4gICAgICAgIGNvbnN0IHBheW1lbnRzVGFibGUgPSBuZXcgVGFibGUodGhpcywgJ1BheW1lbnRzJywge1xuICAgICAgICAgICAgdGFibGVOYW1lOiAnUGF5bWVudHMnLFxuICAgICAgICAgICAgcGFydGl0aW9uS2V5OiB7IG5hbWU6ICdwYXltZW50SWQnLCB0eXBlOiBBdHRyaWJ1dGVUeXBlLlNUUklORyB9LFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBBUElcbiAgICAgICAgY29uc3QgcGF5bWVudHNBcGkgPSBuZXcgUmVzdEFwaSh0aGlzLCAnb2Z4UGF5bWVudHNDaGFsbGVuZ2UnLCB7XG4gICAgICAgICAgICBkZWZhdWx0Q29yc1ByZWZsaWdodE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBhbGxvd09yaWdpbnM6IENvcnMuQUxMX09SSUdJTlMsXG4gICAgICAgICAgICAgICAgYWxsb3dNZXRob2RzOiBDb3JzLkFMTF9NRVRIT0RTLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBUd28gcm91dGVzXCIgL3BheW1lbnRzIGFuZCAvcGF5bWVudHMvaWQgXG4gICAgICAgIGNvbnN0IHBheW1lbnRzUmVzb3VyY2UgPSBwYXltZW50c0FwaS5yb290LmFkZFJlc291cmNlKCdwYXltZW50cycpO1xuICAgICAgICBjb25zdCBzcGVjaWZpY1BheW1lbnRSZXNvdXJjZSA9IHBheW1lbnRzUmVzb3VyY2UuYWRkUmVzb3VyY2UoJ3tpZH0nKTtcblxuICAgICAgICAvLyBGdW5jdGlvbnNcbiAgICAgICAgY29uc3QgY3JlYXRlUGF5bWVudEZ1bmN0aW9uID0gdGhpcy5jcmVhdGVMYW1iZGEoJ2NyZWF0ZVBheW1lbnQnLCAnc3JjL2NyZWF0ZVBheW1lbnQudHMnKTtcbiAgICAgICAgcGF5bWVudHNUYWJsZS5ncmFudFdyaXRlRGF0YShjcmVhdGVQYXltZW50RnVuY3Rpb24pO1xuICAgICAgICBwYXltZW50c1Jlc291cmNlLmFkZE1ldGhvZCgnUE9TVCcsIG5ldyBMYW1iZGFJbnRlZ3JhdGlvbihjcmVhdGVQYXltZW50RnVuY3Rpb24pKTtcblxuICAgICAgICBjb25zdCBnZXRQYXltZW50RnVuY3Rpb24gPSB0aGlzLmNyZWF0ZUxhbWJkYSgnZ2V0UGF5bWVudCcsICdzcmMvZ2V0UGF5bWVudC50cycpO1xuICAgICAgICBwYXltZW50c1RhYmxlLmdyYW50UmVhZERhdGEoZ2V0UGF5bWVudEZ1bmN0aW9uKTtcbiAgICAgICAgc3BlY2lmaWNQYXltZW50UmVzb3VyY2UuYWRkTWV0aG9kKCdHRVQnLCBuZXcgTGFtYmRhSW50ZWdyYXRpb24oZ2V0UGF5bWVudEZ1bmN0aW9uKSk7XG4gICAgICAgIC8vIEJvdW5kIHRvIEdFVCAvcGF5bWVudHMve2lkfS5cblxuICAgICAgICBjb25zdCBsaXN0UGF5bWVudHNGdW5jdGlvbiA9IHRoaXMuY3JlYXRlTGFtYmRhKCdsaXN0UGF5bWVudHMnLCAnc3JjL2xpc3RQYXltZW50cy50cycpO1xuICAgICAgICBwYXltZW50c1RhYmxlLmdyYW50UmVhZERhdGEobGlzdFBheW1lbnRzRnVuY3Rpb24pO1xuICAgICAgICBwYXltZW50c1Jlc291cmNlLmFkZE1ldGhvZCgnR0VUJywgbmV3IExhbWJkYUludGVncmF0aW9uKGxpc3RQYXltZW50c0Z1bmN0aW9uKSk7XG4gICAgfVxuXG4gICAgY3JlYXRlTGFtYmRhID0gKG5hbWU6IHN0cmluZywgcGF0aDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgTm9kZWpzRnVuY3Rpb24odGhpcywgbmFtZSwge1xuICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBuYW1lLFxuICAgICAgICAgICAgcnVudGltZTogUnVudGltZS5OT0RFSlNfMTZfWCxcbiAgICAgICAgICAgIGVudHJ5OiBwYXRoLFxuICAgICAgICB9KTtcbiAgICB9O1xufVxuIl19
