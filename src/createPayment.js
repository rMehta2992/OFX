'use strict';
// src/createPayment.ts
Object.defineProperty(exports, '__esModule', { value: true });
exports.handler = void 0;
const crypto_1 = require('crypto');
const apigateway_1 = require('./lib/apigateway');
const createPaymentSchema_1 = require('./schemas/createPaymentSchema');
const payments_1 = require('./lib/payments');
const http_status_codes_1 = require('http-status-codes');
const handler = async (event) => {
  try {
    // 1) Parse the incoming JSON
    const input = (0, apigateway_1.parseInput)(event.body || '{}');
    const amount = input.amount;
    const currency = input.currency;
    // 2) Schema validation
    const { error } = createPaymentSchema_1.createPaymentSchema.validate(input);
    if (error) {
      return (0, apigateway_1.buildResponse)(http_status_codes_1.StatusCodes.BAD_REQUEST, {
        errors: error.details,
      });
    }
    // 3) Passed validation â€“ generate ID and persist
    const id = (0, crypto_1.randomUUID)();
    const payment = { id, amount, currency };
    await (0, payments_1.createPayment)(payment);
    // 4) Return 201 and the generated ID
    return (0, apigateway_1.buildResponse)(http_status_codes_1.StatusCodes.CREATED, { result: id });
  } catch (err) {
    console.error('Handler error:', err);
    return (0, apigateway_1.buildResponse)(http_status_codes_1.StatusCodes.INTERNAL_SERVER_ERROR, {
      message: err.message || 'An unexpected error occurred',
      //stack trace can be added for multiple env
    });
  }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlUGF5bWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNyZWF0ZVBheW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHVCQUF1Qjs7O0FBRXZCLG1DQUFvQztBQUVwQyxpREFBNkQ7QUFDN0QsdUVBQW9FO0FBQ3BFLDZDQUEwRTtBQUMxRSx5REFBZ0Q7QUFFekMsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUMxQixLQUEyQixFQUNLLEVBQUU7SUFDbEMsSUFBSTtRQUNGLDZCQUE2QjtRQUM3QixNQUFNLEtBQUssR0FBRyxJQUFBLHVCQUFVLEVBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQVEsQ0FBQztRQUNwRCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQzVCLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7UUFFaEMsdUJBQXVCO1FBQ3ZCLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyx5Q0FBbUIsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEQsSUFBSSxLQUFLLEVBQUU7WUFDVCxPQUFPLElBQUEsMEJBQWEsRUFBQywrQkFBVyxDQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUMxRTtRQUVELGlEQUFpRDtRQUNqRCxNQUFNLEVBQUUsR0FBRyxJQUFBLG1CQUFVLEdBQUUsQ0FBQztRQUN4QixNQUFNLE9BQU8sR0FBWSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUM7UUFDbEQsTUFBTSxJQUFBLHdCQUFjLEVBQUMsT0FBTyxDQUFDLENBQUM7UUFFOUIscUNBQXFDO1FBQ3JDLE9BQU8sSUFBQSwwQkFBYSxFQUFDLCtCQUFXLENBQUMsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDM0Q7SUFBQyxPQUFPLEdBQVEsRUFBRTtRQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBQSwwQkFBYSxFQUFDLCtCQUFXLENBQUMscUJBQXFCLEVBQUU7WUFDdEQsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPLElBQUksOEJBQThCO1lBQ3RELDJDQUEyQztTQUM1QyxDQUFDLENBQUM7S0FDSjtJQUFBLENBQUM7QUFDSixDQUFDLENBQUM7QUE3QlcsUUFBQSxPQUFPLFdBNkJsQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9jcmVhdGVQYXltZW50LnRzXG5cbmltcG9ydCB7IHJhbmRvbVVVSUQgfSBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnQsIEFQSUdhdGV3YXlQcm94eVJlc3VsdCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgYnVpbGRSZXNwb25zZSwgcGFyc2VJbnB1dCB9IGZyb20gJy4vbGliL2FwaWdhdGV3YXknO1xuaW1wb3J0IHsgY3JlYXRlUGF5bWVudFNjaGVtYSB9IGZyb20gJy4vc2NoZW1hcy9jcmVhdGVQYXltZW50U2NoZW1hJztcbmltcG9ydCB7IGNyZWF0ZVBheW1lbnQgYXMgcGVyc2lzdFBheW1lbnQsIFBheW1lbnQgfSBmcm9tICcuL2xpYi9wYXltZW50cyc7XG5pbXBvcnQgeyBTdGF0dXNDb2RlcyB9IGZyb20gJ2h0dHAtc3RhdHVzLWNvZGVzJztcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoXG4gIGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudFxuKTogUHJvbWlzZTxBUElHYXRld2F5UHJveHlSZXN1bHQ+ID0+IHtcbiAgdHJ5IHtcbiAgICAvLyAxKSBQYXJzZSB0aGUgaW5jb21pbmcgSlNPTlxuICAgIGNvbnN0IGlucHV0ID0gcGFyc2VJbnB1dChldmVudC5ib2R5IHx8ICd7fScpIGFzIGFueTtcbiAgICBjb25zdCBhbW91bnQgPSBpbnB1dC5hbW91bnQ7XG4gICAgY29uc3QgY3VycmVuY3kgPSBpbnB1dC5jdXJyZW5jeTtcblxuICAgIC8vIDIpIFNjaGVtYSB2YWxpZGF0aW9uXG4gICAgY29uc3QgeyBlcnJvciB9ID0gY3JlYXRlUGF5bWVudFNjaGVtYS52YWxpZGF0ZShpbnB1dCk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICByZXR1cm4gYnVpbGRSZXNwb25zZShTdGF0dXNDb2Rlcy5CQURfUkVRVUVTVCwgeyBlcnJvcnM6IGVycm9yLmRldGFpbHMgfSk7XG4gICAgfVxuXG4gICAgLy8gMykgUGFzc2VkIHZhbGlkYXRpb24g4oCTIGdlbmVyYXRlIElEIGFuZCBwZXJzaXN0XG4gICAgY29uc3QgaWQgPSByYW5kb21VVUlEKCk7XG4gICAgY29uc3QgcGF5bWVudDogUGF5bWVudCA9IHsgaWQsIGFtb3VudCwgY3VycmVuY3kgfTtcbiAgICBhd2FpdCBwZXJzaXN0UGF5bWVudChwYXltZW50KTtcblxuICAgIC8vIDQpIFJldHVybiAyMDEgYW5kIHRoZSBnZW5lcmF0ZWQgSURcbiAgICByZXR1cm4gYnVpbGRSZXNwb25zZShTdGF0dXNDb2Rlcy5DUkVBVEVELCB7IHJlc3VsdDogaWQgfSk7XG4gIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgY29uc29sZS5lcnJvcignSGFuZGxlciBlcnJvcjonLCBlcnIpO1xuICAgIHJldHVybiBidWlsZFJlc3BvbnNlKFN0YXR1c0NvZGVzLklOVEVSTkFMX1NFUlZFUl9FUlJPUiwge1xuICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UgfHwgJ0FuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQnXG4gICAgICAvL3N0YWNrIHRyYWNlIGNhbiBiZSBhZGRlZCBmb3IgbXVsdGlwbGUgZW52XG4gICAgfSk7XG4gIH07XG59O1xuIl19
