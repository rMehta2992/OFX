'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.createPayment = exports.listPayments = exports.getPayment = void 0;
const dynamodb_1 = require('./dynamodb');
const lib_dynamodb_1 = require('@aws-sdk/lib-dynamodb');
/**
 * Retrieve a single payment by its ID.
 */
const getPayment = async (paymentId) => {
  const result = await dynamodb_1.DocumentClient.send(
    new lib_dynamodb_1.GetCommand({
      TableName: 'Payments',
      Key: { paymentId },
    })
  );
  if (!result.Item) {
    return null;
  }
  return {
    id: result.Item.paymentId,
    amount: result.Item.amount,
    currency: result.Item.currency,
  };
};
exports.getPayment = getPayment;
/**
 * List payments, optionally filtering by currency, using strong consistency.
 */
const listPayments = async (currency) => {
  const params = {
    TableName: 'Payments',
    ConsistentRead: true,
  };
  if (currency) {
    params.FilterExpression = 'currency = :c';
    params.ExpressionAttributeValues = { ':c': currency };
  }
  const result = await dynamodb_1.DocumentClient.send(new lib_dynamodb_1.ScanCommand(params));
  const items = result.Items || [];
  // Map DynamoDB items to Payment shape
  return items.map((item) => ({
    id: item.paymentId,
    amount: item.amount,
    currency: item.currency,
  }));
};
exports.listPayments = listPayments;
/**
 * Create a new payment record.
 */
const createPayment = async (payment) => {
  const { id, amount, currency } = payment;
  await dynamodb_1.DocumentClient.send(
    new lib_dynamodb_1.PutCommand({
      TableName: 'Payments',
      Item: {
        paymentId: id,
        amount,
        currency,
      },
    })
  );
};
exports.createPayment = createPayment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwYXltZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSx5Q0FBNEM7QUFDNUMsd0RBQTRFO0FBUTVFOztHQUVHO0FBQ0ksTUFBTSxVQUFVLEdBQUcsS0FBSyxFQUM3QixTQUFpQixFQUNRLEVBQUU7SUFDM0IsTUFBTSxNQUFNLEdBQUcsTUFBTSx5QkFBYyxDQUFDLElBQUksQ0FDdEMsSUFBSSx5QkFBVSxDQUFDO1FBQ2IsU0FBUyxFQUFFLFVBQVU7UUFDckIsR0FBRyxFQUFFLEVBQUUsU0FBUyxFQUFFO0tBQ25CLENBQUMsQ0FDSCxDQUFDO0lBRUYsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7UUFDaEIsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUVELE9BQU87UUFDTCxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTO1FBQ3pCLE1BQU0sRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU07UUFDMUIsUUFBUSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUTtLQUMvQixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBbkJXLFFBQUEsVUFBVSxjQW1CckI7QUFFRjs7R0FFRztBQUNJLE1BQU0sWUFBWSxHQUFHLEtBQUssRUFDL0IsUUFBaUIsRUFDRyxFQUFFO0lBQ3RCLE1BQU0sTUFBTSxHQUFRO1FBQ2xCLFNBQVMsRUFBRSxVQUFVO1FBQ3JCLGNBQWMsRUFBRSxJQUFJO0tBQ3JCLENBQUM7SUFDRixJQUFJLFFBQVEsRUFBRTtRQUNaLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxlQUFlLENBQUM7UUFDMUMsTUFBTSxDQUFDLHlCQUF5QixHQUFHLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDO0tBQ3ZEO0lBQ0QsTUFBTSxNQUFNLEdBQUcsTUFBTSx5QkFBYyxDQUFDLElBQUksQ0FBQyxJQUFJLDBCQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNsRSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBYyxJQUFJLEVBQUUsQ0FBQztJQUMxQyxzQ0FBc0M7SUFDdEMsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixFQUFFLEVBQUUsSUFBSSxDQUFDLFNBQVM7UUFDbEIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1FBQ25CLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtLQUN4QixDQUFDLENBQUMsQ0FBQztBQUNOLENBQUMsQ0FBQztBQW5CVyxRQUFBLFlBQVksZ0JBbUJ2QjtBQUVGOztHQUVHO0FBQ0ksTUFBTSxhQUFhLEdBQUcsS0FBSyxFQUFFLE9BQWdCLEVBQWlCLEVBQUU7SUFDckUsTUFBTSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsT0FBTyxDQUFDO0lBQ3pDLE1BQU0seUJBQWMsQ0FBQyxJQUFJLENBQ3ZCLElBQUkseUJBQVUsQ0FBQztRQUNiLFNBQVMsRUFBRSxVQUFVO1FBQ3JCLElBQUksRUFBRTtZQUNKLFNBQVMsRUFBRSxFQUFFO1lBQ2IsTUFBTTtZQUNOLFFBQVE7U0FDVDtLQUNGLENBQUMsQ0FDSCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBWlcsUUFBQSxhQUFhLGlCQVl4QiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgRG9jdW1lbnRDbGllbnQgfSBmcm9tICcuL2R5bmFtb2RiJztcbmltcG9ydCB7IEdldENvbW1hbmQsIFB1dENvbW1hbmQsIFNjYW5Db21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvbGliLWR5bmFtb2RiJztcblxuZXhwb3J0IHR5cGUgUGF5bWVudCA9IHtcbiAgaWQ6IHN0cmluZztcbiAgYW1vdW50OiBudW1iZXI7XG4gIGN1cnJlbmN5OiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlIGEgc2luZ2xlIHBheW1lbnQgYnkgaXRzIElELlxuICovXG5leHBvcnQgY29uc3QgZ2V0UGF5bWVudCA9IGFzeW5jIChcbiAgcGF5bWVudElkOiBzdHJpbmdcbik6IFByb21pc2U8UGF5bWVudCB8IG51bGw+ID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgRG9jdW1lbnRDbGllbnQuc2VuZChcbiAgICBuZXcgR2V0Q29tbWFuZCh7XG4gICAgICBUYWJsZU5hbWU6ICdQYXltZW50cycsXG4gICAgICBLZXk6IHsgcGF5bWVudElkIH0sXG4gICAgfSlcbiAgKTtcblxuICBpZiAoIXJlc3VsdC5JdGVtKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlkOiByZXN1bHQuSXRlbS5wYXltZW50SWQsXG4gICAgYW1vdW50OiByZXN1bHQuSXRlbS5hbW91bnQsXG4gICAgY3VycmVuY3k6IHJlc3VsdC5JdGVtLmN1cnJlbmN5LFxuICB9O1xufTtcblxuLyoqXG4gKiBMaXN0IHBheW1lbnRzLCBvcHRpb25hbGx5IGZpbHRlcmluZyBieSBjdXJyZW5jeSwgdXNpbmcgc3Ryb25nIGNvbnNpc3RlbmN5LlxuICovXG5leHBvcnQgY29uc3QgbGlzdFBheW1lbnRzID0gYXN5bmMgKFxuICBjdXJyZW5jeT86IHN0cmluZ1xuKTogUHJvbWlzZTxQYXltZW50W10+ID0+IHtcbiAgY29uc3QgcGFyYW1zOiBhbnkgPSB7XG4gICAgVGFibGVOYW1lOiAnUGF5bWVudHMnLFxuICAgIENvbnNpc3RlbnRSZWFkOiB0cnVlXG4gIH07XG4gIGlmIChjdXJyZW5jeSkge1xuICAgIHBhcmFtcy5GaWx0ZXJFeHByZXNzaW9uID0gJ2N1cnJlbmN5ID0gOmMnO1xuICAgIHBhcmFtcy5FeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzID0geyAnOmMnOiBjdXJyZW5jeSB9O1xuICB9XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IERvY3VtZW50Q2xpZW50LnNlbmQobmV3IFNjYW5Db21tYW5kKHBhcmFtcykpO1xuICBjb25zdCBpdGVtcyA9IHJlc3VsdC5JdGVtcyBhcyBhbnlbXSB8fCBbXTtcbiAgLy8gTWFwIER5bmFtb0RCIGl0ZW1zIHRvIFBheW1lbnQgc2hhcGVcbiAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+ICh7XG4gICAgaWQ6IGl0ZW0ucGF5bWVudElkLFxuICAgIGFtb3VudDogaXRlbS5hbW91bnQsXG4gICAgY3VycmVuY3k6IGl0ZW0uY3VycmVuY3lcbiAgfSkpO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgcGF5bWVudCByZWNvcmQuXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVQYXltZW50ID0gYXN5bmMgKHBheW1lbnQ6IFBheW1lbnQpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3QgeyBpZCwgYW1vdW50LCBjdXJyZW5jeSB9ID0gcGF5bWVudDtcbiAgYXdhaXQgRG9jdW1lbnRDbGllbnQuc2VuZChcbiAgICBuZXcgUHV0Q29tbWFuZCh7XG4gICAgICBUYWJsZU5hbWU6ICdQYXltZW50cycsXG4gICAgICBJdGVtOiB7XG4gICAgICAgIHBheW1lbnRJZDogaWQsXG4gICAgICAgIGFtb3VudCxcbiAgICAgICAgY3VycmVuY3ksXG4gICAgICB9LFxuICAgIH0pXG4gICk7XG59OyJdfQ==
